//******************************************************************************
//                          ExperimentAPITest.java
// OpenSILEX - Licence AGPL V3.0 - https://www.gnu.org/licenses/agpl-3.0.en.html
// Copyright Â© INRAE 2020
// Contact: renaud.colin@inrae.fr, anne.tireau@inrae.fr, pascal.neveu@inrae.fr
//******************************************************************************
package org.opensilex.core.factors.api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import static junit.framework.TestCase.assertEquals;
import static junit.framework.TestCase.assertNotNull;
import static junit.framework.TestCase.assertTrue;
import org.junit.Test;
import org.opensilex.OpenSilex;
import org.opensilex.core.factor.api.FactorCreationDTO;
import org.opensilex.core.factor.api.FactorDetailsGetDTO;
import org.opensilex.core.factor.api.FactorGetDTO;
import org.opensilex.core.factor.api.FactorLevelCreationDTO;
import org.opensilex.core.factor.api.FactorSearchDTO;
import org.opensilex.core.factor.api.FactorUpdateDTO;
import org.opensilex.core.factor.dal.FactorLevelModel;
import org.opensilex.core.factor.dal.FactorModel;
import org.opensilex.core.skos.model.SkosModelTest;
import org.opensilex.integration.test.security.AbstractSecurityIntegrationTest;
import org.opensilex.server.response.PaginatedListResponse;
import org.opensilex.server.response.SingleObjectResponse;
import org.opensilex.sparql.model.SPARQLResourceModel;

/**
 * @author Arnaud Charleroy
 */
public class FactorsAPITest extends AbstractSecurityIntegrationTest {

        protected String pathFactors = "/core/factor";
        protected String pathFactorsLevel = "/core/factorLevel";

        protected String uriPath = pathFactors + "/get/{uri}";
        protected String factorsLevelsPath = pathFactors + "/get/{uri}/levels";
        protected String searchPath = pathFactors + "/search";
        protected String getAllPath = pathFactors + "/get-all";
        protected String createPath = pathFactors + "/create";
        protected String updatePath = pathFactors + "/update";
        protected String deleteFactorPath = pathFactors + "/delete/{uri}";
        protected String deleteFactorsLevelPath = pathFactorsLevel + "/delete/{uri}";
        protected String getFactorsLevelPath = pathFactorsLevel + "/get/{uri}";

        private static int factorCount = 0;

        public FactorCreationDTO getCreationDTO() throws URISyntaxException {
                factorCount++;
                FactorCreationDTO dto = new FactorCreationDTO();
                dto.setName("Factor name " + factorCount);
                dto.setCategory("Nom du facteur " + factorCount);
                dto.setComment("Factor Comment" + factorCount);
                // skos model
                SkosModelTest.setValidSkosReferences(dto);
                // factors levels
                List<FactorLevelCreationDTO> factorsLevels = new ArrayList<>();
                FactorLevelCreationDTO factorLevelDto = new FactorLevelCreationDTO();
                factorLevelDto.setName("factorsLevel");
                factorLevelDto.setComment("autogenerated");
                factorsLevels.add(factorLevelDto);
                FactorLevelCreationDTO factorLevelDto2 = new FactorLevelCreationDTO();
                factorLevelDto2.setName("factorsLevel2");
                factorLevelDto2.setComment("autogenerated2");
                factorsLevels.add(factorLevelDto2);
                dto.setFactorLevels(factorsLevels);

                return dto;
        }

        public FactorUpdateDTO addLevelFactorToDTO(FactorUpdateDTO updateDto) {
                List<FactorLevelCreationDTO> factorLevels = updateDto.getFactorLevels();
                FactorLevelCreationDTO factorLevelDto3 = new FactorLevelCreationDTO();
                factorLevelDto3.setName("factorsLevel3");
                factorLevelDto3.setComment("autogenerated3");
                factorLevels.add(factorLevelDto3);
                updateDto.setFactorLevels(factorLevels);

                return updateDto;

        }

        public FactorUpdateDTO getUpdateDTOFromCreationDTO(FactorCreationDTO creationDto) throws URISyntaxException {
                FactorUpdateDTO dto = new FactorUpdateDTO();
                dto.setUri(creationDto.getUri());
                dto.setName(creationDto.getName());
                dto.setComment(creationDto.getComment());
                // skos model
                SkosModelTest.setValidSkosReferences(dto);
                // factors levels
                dto.setFactorLevels(creationDto.getFactorLevels());

                return dto;
        }

        public FactorSearchDTO getFactorSearchDTO(FactorCreationDTO creationDTO) throws URISyntaxException {
                FactorSearchDTO dto = new FactorSearchDTO();
                dto.setName(creationDTO.getName());
                return dto;
        }

        // @Test
        public void testCreate() throws Exception {
                final Response postResult = getJsonPostResponse(target(createPath), getCreationDTO());
                assertEquals(Response.Status.CREATED.getStatusCode(), postResult.getStatus());

                // ensure that the result is a well formed URI, else throw exception
                URI createdUri = extractUriFromResponse(postResult);
                final Response getResult = getJsonGetByUriResponse(target(uriPath), createdUri.toString());
                assertEquals(Response.Status.OK.getStatusCode(), getResult.getStatus());
        }

        @Test
        public void testGetByUri() throws Exception {
                final Response postResult = getJsonPostResponse(target(createPath), getCreationDTO());
                assertEquals(Response.Status.CREATED.getStatusCode(), postResult.getStatus());

                // ensure that the result is a well formed URI, else throw exception
                URI createdUri = extractUriFromResponse(postResult);
                final Response getResult = getJsonGetByUriResponse(target(uriPath), createdUri.toString());
                assertEquals(Response.Status.OK.getStatusCode(), getResult.getStatus());

                // try to deserialize object
                JsonNode node = getResult.readEntity(JsonNode.class);
                ObjectMapper mapper = new ObjectMapper();
                SingleObjectResponse<FactorDetailsGetDTO> getResponse = mapper.convertValue(node,
                                new TypeReference<SingleObjectResponse<FactorDetailsGetDTO>>() {
                                });
                FactorDetailsGetDTO factorGetDto = getResponse.getResult();
                assertNotNull(factorGetDto);
        }

        @Test
        public void testUpdate() throws Exception {
                // create

                FactorCreationDTO creationDTO = getCreationDTO();
                int intialFactorLevelSize = creationDTO.getFactorLevels().size();
                final Response postResult = getJsonPostResponse(target(createPath), creationDTO);
                assertEquals(Response.Status.CREATED.getStatusCode(), postResult.getStatus());

                // ensure that the result is a well formed URI, else throw exception
                URI createdUri = extractUriFromResponse(postResult);
                creationDTO.setUri(createdUri);
                // create
                FactorUpdateDTO updateDTOFromCreationDTO = addLevelFactorToDTO(
                                getUpdateDTOFromCreationDTO(creationDTO));
                final Response putResult = getJsonPutResponse(target(updatePath), updateDTOFromCreationDTO);
                assertEquals(Response.Status.OK.getStatusCode(), putResult.getStatus());

                final Response getResult = getJsonGetByUriResponse(target(uriPath), createdUri.toString());
                assertEquals(Response.Status.OK.getStatusCode(), getResult.getStatus());

                // try to deserialize object
                JsonNode node = getResult.readEntity(JsonNode.class);
                ObjectMapper mapper = new ObjectMapper();
                SingleObjectResponse<FactorDetailsGetDTO> getResponse = mapper.convertValue(node,
                                new TypeReference<SingleObjectResponse<FactorDetailsGetDTO>>() {
                                });
                // System.out.println(node.toPrettyString());
                FactorDetailsGetDTO factorGetDto = getResponse.getResult();
                assertNotNull(factorGetDto);

                assertTrue(factorGetDto.getFactorLevels().size() == intialFactorLevelSize + 1);

        }

        @Test
        public void testSearch() throws Exception {
                FactorCreationDTO creationDTO = getCreationDTO();
                FactorCreationDTO creationDTOTwo = getCreationDTO();

                getJsonPostResponse(target(createPath), creationDTO);
                getJsonPostResponse(target(createPath), creationDTOTwo);
                getJsonPostResponse(target(createPath), getCreationDTO());

                Response getResult1 = getJsonPostResponse(target(searchPath), new FactorSearchDTO());
                JsonNode node1 = getResult1.readEntity(JsonNode.class);

                // System.out.println(node1.toPrettyString());
                ObjectMapper mapper = new ObjectMapper();
                PaginatedListResponse<FactorGetDTO> factorListResponse1 = mapper.convertValue(node1,
                                new TypeReference<PaginatedListResponse<FactorGetDTO>>() {
                                });
                List<FactorGetDTO> list1 = factorListResponse1.getResult();

                // System.out.println("System.out.println(list1.size());"+list1.size());
                assertTrue(list1.size() == 3);

                // wtih parameters
                // System.out.println(creationDTO.getNames().get("en"));
                // System.out.println("search");
                FactorSearchDTO factorSearchDTO = getFactorSearchDTO(creationDTO);
                // System.out.println(factorSearchDTO.getName());

                Response getResult2 = getJsonPostResponse(target(searchPath), factorSearchDTO,
                                OpenSilex.DEFAULT_LANGUAGE);

                assertEquals(Status.OK.getStatusCode(), getResult2.getStatus());

                JsonNode node2 = getResult2.readEntity(JsonNode.class);
                // System.out.println(node2.toPrettyString());
                PaginatedListResponse<FactorGetDTO> factorListResponse2 = mapper.convertValue(node2,
                                new TypeReference<PaginatedListResponse<FactorGetDTO>>() {
                                });
                List<FactorGetDTO> list2 = factorListResponse2.getResult();
                // System.out.println(list2.toString());

                assertTrue(!list2.isEmpty());

        }

        @Test
        public void testGetAll() throws Exception {
                FactorCreationDTO creationDTO = getCreationDTO();
                FactorCreationDTO creationDTOTwo = getCreationDTO();

                getJsonPostResponse(target(createPath), creationDTO);
                getJsonPostResponse(target(createPath), creationDTOTwo);
                getJsonPostResponse(target(createPath), getCreationDTO());
                getJsonPostResponse(target(createPath), getCreationDTO());
                getJsonPostResponse(target(createPath), getCreationDTO());
                getJsonPostResponse(target(createPath), getCreationDTO());
                getJsonPostResponse(target(createPath), getCreationDTO());
                getJsonPostResponse(target(createPath), getCreationDTO());
                getJsonPostResponse(target(createPath), getCreationDTO());
                getJsonPostResponse(target(createPath), getCreationDTO());

                Response getResult1 = getJsonGetResponse(target(getAllPath));
                JsonNode node1 = getResult1.readEntity(JsonNode.class);

                // System.out.println(node1.toPrettyString());
                ObjectMapper mapper = new ObjectMapper();
                PaginatedListResponse<FactorGetDTO> factorListResponse1 = mapper.convertValue(node1,
                                new TypeReference<PaginatedListResponse<FactorGetDTO>>() {
                                });
                List<FactorGetDTO> list1 = factorListResponse1.getResult();

                // System.out.println("System.out.println(list1.size());"+list1.size());
                assertTrue(list1.size() == 10);
        }

        @Test
        public void testDeleteFactor() throws Exception {

                // create object and check if URI exists
                Response postResponse = getJsonPostResponse(target(createPath), getCreationDTO());
                String uri = extractUriFromResponse(postResponse).toString();
                assertEquals(Response.Status.CREATED.getStatusCode(), postResponse.getStatus());
                // delete object and check if URI no longer exists
                Response delResult = getDeleteByUriResponse(target(deleteFactorPath), uri);
                assertEquals(Status.OK.getStatusCode(), delResult.getStatus());

                Response getResult = getJsonGetByUriResponse(target(uriPath), uri);
                assertEquals(Status.NOT_FOUND.getStatusCode(), getResult.getStatus());
        }

        @Test
        public void testDeleteFactorLevel() throws Exception {

                // create object and check if URI exists
                Response postResponse = getJsonPostResponse(target(createPath), getCreationDTO());
                String uri = extractUriFromResponse(postResponse).toString();
                assertEquals(Response.Status.CREATED.getStatusCode(), postResponse.getStatus());

                // ensure that the result is a well formed URI, else throw exception
                Response getResult = getJsonGetByUriResponse(target(uriPath), uri);
                assertEquals(Response.Status.OK.getStatusCode(), getResult.getStatus());

                // try to deserialize object
                JsonNode node = getResult.readEntity(JsonNode.class);
                ObjectMapper mapper = new ObjectMapper();
                SingleObjectResponse<FactorDetailsGetDTO> getResponse = mapper.convertValue(node,
                                new TypeReference<SingleObjectResponse<FactorDetailsGetDTO>>() {
                                });
                FactorDetailsGetDTO factorGetDto = getResponse.getResult();
                int factorLevelSize = factorGetDto.getFactorLevels().size();
                URI uriToRemove = factorGetDto.getFactorLevels().get(0).getUri();
                // delete object and check if URI no longer exists
                Response delResult = getDeleteByUriResponse(target(deleteFactorsLevelPath), uriToRemove.toString());
                assertEquals(Status.OK.getStatusCode(), delResult.getStatus());

                Response getResult2 = getJsonGetByUriResponse(target(getFactorsLevelPath), uriToRemove.toString());
                assertEquals(Status.NOT_FOUND.getStatusCode(), getResult2.getStatus());

                getResult = getJsonGetByUriResponse(target(uriPath), uri);
                node = getResult.readEntity(JsonNode.class);
                assertEquals(Response.Status.OK.getStatusCode(), getResult.getStatus());
                getResponse = mapper.convertValue(node, new TypeReference<SingleObjectResponse<FactorDetailsGetDTO>>() {
                });
                factorGetDto = getResponse.getResult();
                assertEquals(factorLevelSize - 1, factorGetDto.getFactorLevels().size());
        }

        @Test
        public void testGetFactorLevel() throws Exception {

                // create object and check if URI exists
                FactorCreationDTO creationDTO = getCreationDTO();
                Response postResponse = getJsonPostResponse(target(createPath), creationDTO);
                String uri = extractUriFromResponse(postResponse).toString();
                assertEquals(Response.Status.CREATED.getStatusCode(), postResponse.getStatus());

                // ensure that the result is a well formed URI, else throw exception
                final Response getResult = getJsonGetByUriResponse(target(uriPath), uri);
                assertEquals(Response.Status.OK.getStatusCode(), getResult.getStatus());

                // try to deserialize object
                JsonNode node = getResult.readEntity(JsonNode.class);
                ObjectMapper mapper = new ObjectMapper();
                SingleObjectResponse<FactorDetailsGetDTO> getResponse = mapper.convertValue(node,
                                new TypeReference<SingleObjectResponse<FactorDetailsGetDTO>>() {
                                });
                FactorDetailsGetDTO factorGetDto = getResponse.getResult();
                int factorLevelSize = factorGetDto.getFactorLevels().size();
                assertEquals(factorLevelSize, creationDTO.getFactorLevels().size());
                URI uriToFind = factorGetDto.getFactorLevels().get(0).getUri();

                Response getResult2 = getJsonGetByUriResponse(target(getFactorsLevelPath), uriToFind.toString());
                assertEquals(Status.OK.getStatusCode(), getResult2.getStatus());
        }

        @Override
        protected List<Class<? extends SPARQLResourceModel>> getModelsToClean() {
                return Stream.of(FactorModel.class, FactorLevelModel.class).collect(Collectors.toList());

        }
}
