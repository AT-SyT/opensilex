/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { ProjectCreationDTO } from '../model/projectCreationDTO';
import { ProjectUpdateDTO } from '../model/projectUpdateDTO';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ProjectsService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }
    /**
     * Delete a project
     * 
     * @param uri Project URI
     * @param Authorization Authentication token
     
     */
    public _delete(uri: string, Authorization: string, observe?: 'body', headers?: Headers): Observable<any>;
    public _delete(uri: string, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public _delete(uri: string, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling _delete.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling _delete.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/core/project/${encodeURIComponent(String(uri))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Create a project
     * 
     * @param Authorization Authentication token
     * @param body Project description
     
     */
    public create(Authorization: string, body?: ProjectCreationDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public create(Authorization: string, body?: ProjectCreationDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public create(Authorization: string, body?: ProjectCreationDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling create.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/core/project`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Find entities corresponding to given criteria
     * 
     * @param Authorization Authentication token
     * @param orderBy List of fields to sort as an array of fieldName&#x3D;asc|desc
     * @param page Page number
     * @param pageSize Page size
     
     */
    public find(Authorization: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe?: 'body', headers?: Headers): Observable<any>;
    public find(Authorization: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public find(Authorization: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling find.');
        }

        let queryParameters: string[] = [];
        if (orderBy) {
            orderBy.forEach((element) => {
                queryParameters.push("orderBy="+encodeURIComponent(String(orderBy)));
            })
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/core/project/find?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get a project
     * 
     * @param uri Project URI
     * @param Authorization Authentication token
     
     */
    public get(uri: string, Authorization: string, observe?: 'body', headers?: Headers): Observable<any>;
    public get(uri: string, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public get(uri: string, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling get.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling get.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/core/project/${encodeURIComponent(String(uri))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Update a project
     * 
     * @param uri Project URI
     * @param Authorization Authentication token
     * @param body Project description
     
     */
    public update(uri: string, Authorization: string, body?: ProjectUpdateDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public update(uri: string, Authorization: string, body?: ProjectUpdateDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public update(uri: string, Authorization: string, body?: ProjectUpdateDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling update.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling update.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/core/project/${encodeURIComponent(String(uri))}`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
}
