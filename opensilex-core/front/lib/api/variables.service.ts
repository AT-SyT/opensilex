/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { EntityCreationDTO } from '../model/entityCreationDTO';
import { EntityUpdateDTO } from '../model/entityUpdateDTO';
import { MethodCreationDTO } from '../model/methodCreationDTO';
import { MethodUpdateDTO } from '../model/methodUpdateDTO';
import { QualityCreationDTO } from '../model/qualityCreationDTO';
import { QualityUpdateDTO } from '../model/qualityUpdateDTO';
import { UnitCreationDTO } from '../model/unitCreationDTO';
import { UnitUpdateDTO } from '../model/unitUpdateDTO';
import { VariableCreationDTO } from '../model/variableCreationDTO';
import { VariableUpdateDTO } from '../model/variableUpdateDTO';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class VariablesService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }
    /**
     * Create an entity
     * 
     * @param Authorization Authentication token
     * @param body Entity description
     
     */
    public create1(Authorization: string, body?: EntityCreationDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public create1(Authorization: string, body?: EntityCreationDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public create1(Authorization: string, body?: EntityCreationDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling create1.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/core/variable/entity`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Create a method
     * 
     * @param Authorization Authentication token
     * @param body Method description
     
     */
    public create2(Authorization: string, body?: MethodCreationDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public create2(Authorization: string, body?: MethodCreationDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public create2(Authorization: string, body?: MethodCreationDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling create2.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/core/variable/method`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Create a quality
     * 
     * @param Authorization Authentication token
     * @param body Quality description
     
     */
    public create3(Authorization: string, body?: QualityCreationDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public create3(Authorization: string, body?: QualityCreationDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public create3(Authorization: string, body?: QualityCreationDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling create3.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/core/variable/quality`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Create a unit
     * 
     * @param Authorization Authentication token
     * @param body Unit description
     
     */
    public create4(Authorization: string, body?: UnitCreationDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public create4(Authorization: string, body?: UnitCreationDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public create4(Authorization: string, body?: UnitCreationDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling create4.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/core/variable/unit`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Create a variable
     * 
     * @param Authorization Authentication token
     * @param body Variable description
     
     */
    public create5(Authorization: string, body?: VariableCreationDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public create5(Authorization: string, body?: VariableCreationDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public create5(Authorization: string, body?: VariableCreationDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling create5.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/core/variable`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Delete an entity
     * 
     * @param uri Entity URI
     * @param Authorization Authentication token
     
     */
    public delete1(uri: string, Authorization: string, observe?: 'body', headers?: Headers): Observable<any>;
    public delete1(uri: string, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public delete1(uri: string, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling delete1.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling delete1.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/core/variable/entity/${encodeURIComponent(String(uri))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Delete a method
     * 
     * @param uri Method URI
     * @param Authorization Authentication token
     
     */
    public delete2(uri: string, Authorization: string, observe?: 'body', headers?: Headers): Observable<any>;
    public delete2(uri: string, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public delete2(uri: string, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling delete2.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling delete2.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/core/variable/method/${encodeURIComponent(String(uri))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Delete a quality
     * 
     * @param uri Quality URI
     * @param Authorization Authentication token
     
     */
    public delete3(uri: string, Authorization: string, observe?: 'body', headers?: Headers): Observable<any>;
    public delete3(uri: string, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public delete3(uri: string, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling delete3.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling delete3.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/core/variable/quality/${encodeURIComponent(String(uri))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Delete a unit
     * 
     * @param uri Unit URI
     * @param Authorization Authentication token
     
     */
    public delete4(uri: string, Authorization: string, observe?: 'body', headers?: Headers): Observable<any>;
    public delete4(uri: string, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public delete4(uri: string, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling delete4.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling delete4.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/core/variable/unit/${encodeURIComponent(String(uri))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Delete a variable
     * 
     * @param uri Variable URI
     * @param Authorization Authentication token
     
     */
    public delete5(uri: string, Authorization: string, observe?: 'body', headers?: Headers): Observable<any>;
    public delete5(uri: string, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public delete5(uri: string, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling delete5.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling delete5.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/core/variable/${encodeURIComponent(String(uri))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Find entities corresponding to given criteria
     * 
     * @param Authorization Authentication token
     * @param name Name regex pattern
     * @param comment Comment regex pattern
     * @param orderBy List of fields to sort as an array of fieldName&#x3D;asc|desc
     * @param page Page number
     * @param pageSize Page size
     
     */
    public find1(Authorization: string, name?: string, comment?: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe?: 'body', headers?: Headers): Observable<any>;
    public find1(Authorization: string, name?: string, comment?: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public find1(Authorization: string, name?: string, comment?: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling find1.');
        }

        let queryParameters: string[] = [];
        if (name !== undefined) {
            queryParameters.push("name="+encodeURIComponent(String(name)));
        }
        if (comment !== undefined) {
            queryParameters.push("comment="+encodeURIComponent(String(comment)));
        }
        if (orderBy) {
            orderBy.forEach((element) => {
                queryParameters.push("orderBy="+encodeURIComponent(String(orderBy)));
            })
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/core/variable/entity/find?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Find entities corresponding to given criteria
     * 
     * @param Authorization Authentication token
     * @param name Name regex pattern
     * @param comment Comment regex pattern
     * @param orderBy List of fields to sort as an array of fieldName&#x3D;asc|desc
     * @param page Page number
     * @param pageSize Page size
     
     */
    public find2(Authorization: string, name?: string, comment?: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe?: 'body', headers?: Headers): Observable<any>;
    public find2(Authorization: string, name?: string, comment?: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public find2(Authorization: string, name?: string, comment?: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling find2.');
        }

        let queryParameters: string[] = [];
        if (name !== undefined) {
            queryParameters.push("name="+encodeURIComponent(String(name)));
        }
        if (comment !== undefined) {
            queryParameters.push("comment="+encodeURIComponent(String(comment)));
        }
        if (orderBy) {
            orderBy.forEach((element) => {
                queryParameters.push("orderBy="+encodeURIComponent(String(orderBy)));
            })
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/core/variable/method/find?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Find entities corresponding to given criteria
     * 
     * @param Authorization Authentication token
     * @param name Name regex pattern
     * @param comment Comment regex pattern
     * @param orderBy List of fields to sort as an array of fieldName&#x3D;asc|desc
     * @param page Page number
     * @param pageSize Page size
     
     */
    public find3(Authorization: string, name?: string, comment?: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe?: 'body', headers?: Headers): Observable<any>;
    public find3(Authorization: string, name?: string, comment?: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public find3(Authorization: string, name?: string, comment?: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling find3.');
        }

        let queryParameters: string[] = [];
        if (name !== undefined) {
            queryParameters.push("name="+encodeURIComponent(String(name)));
        }
        if (comment !== undefined) {
            queryParameters.push("comment="+encodeURIComponent(String(comment)));
        }
        if (orderBy) {
            orderBy.forEach((element) => {
                queryParameters.push("orderBy="+encodeURIComponent(String(orderBy)));
            })
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/core/variable/quality/find?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Find entities corresponding to given criteria
     * 
     * @param Authorization Authentication token
     * @param name Name regex pattern
     * @param comment Comment regex pattern
     * @param orderBy List of fields to sort as an array of fieldName&#x3D;asc|desc
     * @param page Page number
     * @param pageSize Page size
     
     */
    public find4(Authorization: string, name?: string, comment?: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe?: 'body', headers?: Headers): Observable<any>;
    public find4(Authorization: string, name?: string, comment?: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public find4(Authorization: string, name?: string, comment?: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling find4.');
        }

        let queryParameters: string[] = [];
        if (name !== undefined) {
            queryParameters.push("name="+encodeURIComponent(String(name)));
        }
        if (comment !== undefined) {
            queryParameters.push("comment="+encodeURIComponent(String(comment)));
        }
        if (orderBy) {
            orderBy.forEach((element) => {
                queryParameters.push("orderBy="+encodeURIComponent(String(orderBy)));
            })
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/core/variable/unit/find?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Find variables corresponding to given criteria
     * 
     * @param Authorization Authentication token
     * @param name Name regex pattern
     * @param comment Comment regex pattern
     * @param entity Filter by entity URI
     * @param quality Filter by quality URI
     * @param method Filter by method URI
     * @param unit Filter by unit URI
     * @param orderBy List of fields to sort as an array of fieldName&#x3D;asc|desc
     * @param page Page number
     * @param pageSize Page size
     
     */
    public find5(Authorization: string, name?: string, comment?: string, entity?: string, quality?: string, method?: string, unit?: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe?: 'body', headers?: Headers): Observable<any>;
    public find5(Authorization: string, name?: string, comment?: string, entity?: string, quality?: string, method?: string, unit?: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public find5(Authorization: string, name?: string, comment?: string, entity?: string, quality?: string, method?: string, unit?: string, orderBy?: Array<string>, page?: number, pageSize?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling find5.');
        }

        let queryParameters: string[] = [];
        if (name !== undefined) {
            queryParameters.push("name="+encodeURIComponent(String(name)));
        }
        if (comment !== undefined) {
            queryParameters.push("comment="+encodeURIComponent(String(comment)));
        }
        if (entity !== undefined) {
            queryParameters.push("entity="+encodeURIComponent(String(entity)));
        }
        if (quality !== undefined) {
            queryParameters.push("quality="+encodeURIComponent(String(quality)));
        }
        if (method !== undefined) {
            queryParameters.push("method="+encodeURIComponent(String(method)));
        }
        if (unit !== undefined) {
            queryParameters.push("unit="+encodeURIComponent(String(unit)));
        }
        if (orderBy) {
            orderBy.forEach((element) => {
                queryParameters.push("orderBy="+encodeURIComponent(String(orderBy)));
            })
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/core/variable/find?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get an entity
     * 
     * @param uri Entity URI
     * @param Authorization Authentication token
     
     */
    public get1(uri: string, Authorization: string, observe?: 'body', headers?: Headers): Observable<any>;
    public get1(uri: string, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public get1(uri: string, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling get1.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling get1.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/core/variable/entity/${encodeURIComponent(String(uri))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get a method
     * 
     * @param uri Method URI
     * @param Authorization Authentication token
     
     */
    public get2(uri: string, Authorization: string, observe?: 'body', headers?: Headers): Observable<any>;
    public get2(uri: string, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public get2(uri: string, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling get2.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling get2.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/core/variable/method/${encodeURIComponent(String(uri))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get a quality
     * 
     * @param uri Quality URI
     * @param Authorization Authentication token
     
     */
    public get3(uri: string, Authorization: string, observe?: 'body', headers?: Headers): Observable<any>;
    public get3(uri: string, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public get3(uri: string, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling get3.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling get3.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/core/variable/quality/${encodeURIComponent(String(uri))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get a unit
     * 
     * @param uri Unit URI
     * @param Authorization Authentication token
     
     */
    public get4(uri: string, Authorization: string, observe?: 'body', headers?: Headers): Observable<any>;
    public get4(uri: string, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public get4(uri: string, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling get4.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling get4.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/core/variable/unit/${encodeURIComponent(String(uri))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get a variable
     * 
     * @param uri Variable URI
     * @param Authorization Authentication token
     
     */
    public get5(uri: string, Authorization: string, observe?: 'body', headers?: Headers): Observable<any>;
    public get5(uri: string, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public get5(uri: string, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling get5.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling get5.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/core/variable/${encodeURIComponent(String(uri))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Update an entity
     * 
     * @param uri Entity URI
     * @param Authorization Authentication token
     * @param body Entity description
     
     */
    public update1(uri: string, Authorization: string, body?: EntityUpdateDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public update1(uri: string, Authorization: string, body?: EntityUpdateDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public update1(uri: string, Authorization: string, body?: EntityUpdateDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling update1.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling update1.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/core/variable/entity/${encodeURIComponent(String(uri))}`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Update a method
     * 
     * @param uri Method URI
     * @param Authorization Authentication token
     * @param body Method description
     
     */
    public update2(uri: string, Authorization: string, body?: MethodUpdateDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public update2(uri: string, Authorization: string, body?: MethodUpdateDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public update2(uri: string, Authorization: string, body?: MethodUpdateDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling update2.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling update2.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/core/variable/method/${encodeURIComponent(String(uri))}`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Update a quality
     * 
     * @param uri Quality URI
     * @param Authorization Authentication token
     * @param body Quality description
     
     */
    public update3(uri: string, Authorization: string, body?: QualityUpdateDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public update3(uri: string, Authorization: string, body?: QualityUpdateDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public update3(uri: string, Authorization: string, body?: QualityUpdateDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling update3.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling update3.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/core/variable/quality/${encodeURIComponent(String(uri))}`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Update a unit
     * 
     * @param uri Unit URI
     * @param Authorization Authentication token
     * @param body Unit description
     
     */
    public update4(uri: string, Authorization: string, body?: UnitUpdateDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public update4(uri: string, Authorization: string, body?: UnitUpdateDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public update4(uri: string, Authorization: string, body?: UnitUpdateDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling update4.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling update4.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/core/variable/unit/${encodeURIComponent(String(uri))}`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Update a variable
     * 
     * @param uri Variable URI
     * @param Authorization Authentication token
     * @param body Variable description
     
     */
    public update5(uri: string, Authorization: string, body?: VariableUpdateDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public update5(uri: string, Authorization: string, body?: VariableUpdateDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public update5(uri: string, Authorization: string, body?: VariableUpdateDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling update5.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling update5.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/core/variable/${encodeURIComponent(String(uri))}`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
}
