/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";


import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class HelloService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }
    /**
     * Say hello to the user !
     * 
     * @param Authorization Authentication token
     
     */
    public world(Authorization: string, observe?: 'body', headers?: Headers): Observable<any>;
    public world(Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public world(Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling world.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'text/plain';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/hello/user`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Say hello to the world !
     * 
     
     */
    public world1(observe?: 'body', headers?: Headers): Observable<any>;
    public world1(observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public world1(observe: any = 'body', headers: Headers = {}): Observable<any> {
        headers['Accept'] = 'text/plain';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/hello/world`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
}
