//******************************************************************************
//                           Module.java
// OpenSILEX
// Copyright Â© INRA 2019
// Creation date: 01 jan. 2019
// Contact: vincent.migot@inra.fr, anne.tireau@inra.fr, pascal.neveu@inra.fr
//******************************************************************************
package org.opensilex.module;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import org.opensilex.OpenSilex;
import org.opensilex.server.rest.RestApplication;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This abstract class provide entry point for OpenSILEX modules inside
 * application Simply extends this class to create a module.
 */
public abstract class Module {

    private final static Logger LOGGER = LoggerFactory.getLogger(Module.class);

    /**
     * Reference to the main application
     */
    protected OpenSilex app = null;

    /**
     * Main application mavenProperties file generated by maven plugins It
     * contains all mavenProperties defined in pom.xml during build
     */
    private final static String APP_PROPERTIES = "app.properties";

    /**
     * Properties wich will be filled with those generated during maven build
     */
    private Properties mavenProperties = new Properties();

    /**
     * This setter allow to give a reference to the main application class
     * instance to each module
     *
     * @param app the main application class instance
     */
    void setApplication(OpenSilex app) {
        this.app = app;
    }

    /**
     * Read Maven build properties
     */
    public Properties getMavenProperties() {
        if (mavenProperties.isEmpty()) {
            try {
                // Read build mavenProperties generated by maven plugin
                final InputStream stream = getClass().getClassLoader().getResourceAsStream(APP_PROPERTIES);
                if (stream != null) {
                    mavenProperties.load(stream);
                    stream.close();
                }
            } catch (IOException ex) {
                LOGGER.error("Can't load maven properties for module: " + getClass().getCanonicalName(), ex);
            }
        }

        return mavenProperties;
    }

    /**
     * This method is called during application initialization to get all
     * packages to scan for components like request filters
     *
     * @return List of packages to scan
     */
    public List<String> getPackagesToScan() {
        List<String> list = new ArrayList<>();
        list.addAll(apiPackages());

        return list;
    }

    /**
     * This method is called during application initialization to get all
     * packages to scan for jersey web services wich will be displayed into
     * swagger UI
     *
     * @return List of packages to scan for web services
     */
    public List<String> apiPackages() {
        List<String> list = new ArrayList<>();
        list.add(getClass().getPackage().getName());

        return list;
    }

    /**
     * Return OpenSilex version
     *
     * @return OpenSilex version
     */
    public String getOpenSilexVersion() {
        return getMavenProperties().getProperty("revision", "");
    }

    public InputStream getYamlFile(String profileId) {
        String yamlPath = "config/" + profileId + "/opensilex.yaml";
        
        try {
            URL sourceLocation = getClass().getProtectionDomain().getCodeSource().getLocation();
            String sourceLocationString = sourceLocation.toString();
            LOGGER.debug(getClass().getCanonicalName() + " - Load config file from: " + sourceLocationString);
            
            if (sourceLocationString.endsWith(".jar")) {

                File jarFile = Paths.get(sourceLocation.toURI()).toFile();
                ZipFile zipFile = new ZipFile(jarFile);
                ZipEntry entry = zipFile.getEntry(yamlPath);
                FileSystem fs = FileSystems.newFileSystem(Paths.get(jarFile.getAbsolutePath()), null);
                Path cfgFile = fs.getPath(yamlPath);
                if (Files.exists(cfgFile)) {
                    return zipFile.getInputStream(entry);
                }

            } else {
                File cfgFile = Paths.get(sourceLocation.toURI().resolve(yamlPath)).toFile();
                if (cfgFile.exists()) {
                    return new FileInputStream(cfgFile);
                }
            }
        } catch (Exception ex) {
            LOGGER.warn(getClass().getCanonicalName() + " - Can't load config file: " + yamlPath, ex);
        }
        
        return null;
    }

    public void init() {

    }
    
    /**
     * This entry point allow module to initialize anything in application after
     * all configuration is loaded at the end of application loading
     */
    public void start(RestApplication resourceConfig) {
        // Do nothing by default; 
    }
    
    public void clean() {

    }
    
    private ModuleConfig config;

    public void setConfig(ModuleConfig config) {
        this.config = config;
    }

    public ModuleConfig getConfig() {
        return config;
    }

    @SuppressWarnings("unchecked")
    public <T> T getConfig(Class<T> configClass) {
        return (T) config;
    }

    public String getConfigId() {
        return null;
    }

    public Class<? extends ModuleConfig> getConfigClass() {
        return null;
    }
}
