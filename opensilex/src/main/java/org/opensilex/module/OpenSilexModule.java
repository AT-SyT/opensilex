//******************************************************************************
//                           Module.java
// OpenSILEX
// Copyright Â© INRA 2019
// Creation date: 01 jan. 2019
// Contact: vincent.migot@inra.fr, anne.tireau@inra.fr, pascal.neveu@inra.fr
//******************************************************************************
package org.opensilex.module;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import org.apache.commons.io.IOUtils;
import org.apache.maven.model.Model;
import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
import org.opensilex.OpenSilex;
import org.opensilex.server.rest.RestApplication;
import org.opensilex.service.Service;
import org.opensilex.utils.ClassInfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This abstract class provide entry point for OpenSILEX modules inside
 * application Simply extends this class to create a module.
 */
public abstract class OpenSilexModule {

    private final static Logger LOGGER = LoggerFactory.getLogger(OpenSilexModule.class);

    /**
     * Reference to the main application
     */
    protected OpenSilex app = null;

    /**
     * Main application mavenProperties file generated by maven plugins It
     * contains all mavenProperties defined in pom.xml during build
     */
    private final static String APP_PROPERTIES = "app.properties";

    /**
     * Properties wich will be filled with those generated during maven build
     */
    private Properties mavenProperties = new Properties();

    /**
     * This setter allow to give a reference to the main application class
     * instance to each module
     *
     * @param app the main application class instance
     */
    void setApplication(OpenSilex app) {
        this.app = app;
    }

    /**
     * Read Maven build properties
     */
    public Properties getMavenProperties() {
        if (mavenProperties.isEmpty()) {
            try {
                // Read build mavenProperties generated by maven plugin
                final InputStream stream = getClass().getClassLoader().getResourceAsStream(APP_PROPERTIES);
                if (stream != null) {
                    mavenProperties.load(stream);
                    stream.close();
                }
            } catch (IOException ex) {
                LOGGER.error("Can't load maven properties for module: " + getClass().getCanonicalName(), ex);
            }
        }

        return mavenProperties;
    }

    public String getProjectId() {
        String projectId = getClass().getPackage().getImplementationTitle();
        if (projectId == null) {
            try {
                File pom = ClassInfo.getPomFile(getClass());
                MavenXpp3Reader reader = new MavenXpp3Reader();
                Model model = reader.read(new FileReader(pom));
                projectId = model.getArtifactId();
            } catch (Exception ex) {
                // TODO warn;
                return "opensilex";
            }
        }

        return projectId;
    }

    /**
     * This method is called during application initialization to get all
     * packages to scan for components like request filters or response mapper
     *
     * @return List of packages to scan
     */
    public List<String> getPackagesToScan() {
        List<String> list = new ArrayList<>();
        list.addAll(apiPackages());

        return list;
    }

    /**
     * This method is called during application initialization to get all
     * packages to scan for jersey web services wich will be displayed into
     * swagger UI
     *
     * @return List of packages to scan for web services
     */
    public List<String> apiPackages() {
        List<String> list = new ArrayList<>();
        list.add(getClass().getPackage().getName());

        return list;
    }

    /**
     * Return OpenSilex version
     *
     * @return OpenSilex version
     */
    public String getOpenSilexVersion() {
        return getMavenProperties().getProperty("revision", "");
    }

    public boolean fileExists(String fileName) throws Exception {
        URL sourceLocation = getClass().getProtectionDomain().getCodeSource().getLocation();
        String sourceLocationString = sourceLocation.toString();
        LOGGER.debug(getClass().getCanonicalName() + " - Load file from: " + sourceLocationString + " looking for: " + fileName);

        if (sourceLocationString.endsWith(".jar")) {

            File jarFile = Paths.get(sourceLocation.toURI()).toFile();
            ZipFile zipFile = new ZipFile(jarFile);
            FileSystem fs = FileSystems.newFileSystem(Paths.get(jarFile.getAbsolutePath()), null);
            Path file = fs.getPath(fileName);
            if (Files.isRegularFile(file)) {
                return true;
            }
            zipFile.close();

        } else {
            File file = Paths.get(sourceLocation.toURI().resolve(fileName)).toFile();
            if (file.exists() && file.isFile()) {
                return true;
            }
        }

        return false;
    }
    
    public InputStream getFileInputStream(String fileName) throws Exception {
        URL sourceLocation = getClass().getProtectionDomain().getCodeSource().getLocation();
        String sourceLocationString = sourceLocation.toString();
        LOGGER.debug(getClass().getCanonicalName() + " - Load file from: " + sourceLocationString + " looking for: " + fileName);

        if (sourceLocationString.endsWith(".jar")) {

            File jarFile = Paths.get(sourceLocation.toURI()).toFile();
            ZipFile zipFile = new ZipFile(jarFile);
            FileSystem fs = FileSystems.newFileSystem(Paths.get(jarFile.getAbsolutePath()), null);
            Path file = fs.getPath(fileName);
            InputStream stream = null;
            if (Files.isRegularFile(file)) {
                ZipEntry entry = zipFile.getEntry(fileName);
                byte[] byteArray = IOUtils.toByteArray(zipFile.getInputStream(entry));
                stream = new ByteArrayInputStream(byteArray);
            }
            zipFile.close();
            return stream;

        } else {
            File file = Paths.get(sourceLocation.toURI().resolve(fileName)).toFile();
            if (file.exists() && file.isFile()) {
                return new FileInputStream(file);
            }
        }

        return null;
    }

    public List<String> listResourceDirectory(String directoryName) throws Exception {
        URL sourceLocation = getClass().getProtectionDomain().getCodeSource().getLocation();
        String sourceLocationString = sourceLocation.toString();
        LOGGER.debug(getClass().getCanonicalName() + " - List directory from: " + sourceLocationString + " looking for: " + directoryName);

        List<String> files = new ArrayList<>();

        if (sourceLocationString.endsWith(".jar")) {

            File jarFile = Paths.get(sourceLocation.toURI()).toFile();
            ZipFile zipFile = new ZipFile(jarFile);
            FileSystem fs = FileSystems.newFileSystem(Paths.get(jarFile.getAbsolutePath()), null);
            Path directoryPath = fs.getPath(directoryName);

            if (Files.exists(directoryPath) && Files.isDirectory(directoryPath)) {
                Stream<Path> walk = Files.walk(directoryPath);
                files = walk
                        .filter(Files::isRegularFile)
                        .map(f -> f.getFileName().toString()).collect(Collectors.toList());
            }
            zipFile.close();

        } else {
            File directory = Paths.get(sourceLocation.toURI().resolve(directoryName)).toFile();
            if (directory.exists() && directory.isDirectory()) {
                Stream<Path> walk = Files.walk(directory.toPath());
                files = walk
                        .filter(Files::isRegularFile)
                        .map(f -> f.getFileName().toString()).collect(Collectors.toList());
            }
        }

        return files;
    }

    public InputStream getYamlFile(String profileId) {
        String yamlPath = "config/" + profileId + "/opensilex.yaml";

        try {
            return getFileInputStream(yamlPath);
        } catch (Exception ex) {
            LOGGER.warn(getClass().getCanonicalName() + " - Can't load config file: " + yamlPath, ex);
        }

        return null;
    }

    public void init() {

    }

    /**
     * This entry point allow module to initialize anything in application after
     * all configuration is loaded at the end of application loading
     */
    public void start(RestApplication resourceConfig) {
        // Do nothing by default; 
    }

    public void clean() {

    }

    private ModuleConfig config;

    public void setConfig(ModuleConfig config) {
        this.config = config;
    }

    public ModuleConfig getConfig() {
        return config;
    }

    @SuppressWarnings("unchecked")
    public <T> T getConfig(Class<T> configClass) {
        return (T) config;
    }

    public String getConfigId() {
        return null;
    }

    public Class<? extends ModuleConfig> getConfigClass() {
        return null;
    }
    
    public <T extends Service> T getService(String serviceId, Class<T> serviceInterface) {
        return app.getServiceInstance(serviceId, serviceInterface);
    }
}
