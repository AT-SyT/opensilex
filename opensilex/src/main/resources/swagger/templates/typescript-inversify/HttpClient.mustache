import IHttpClient from "./IHttpClient";
{{^usePromise}}
import { Observable } from "rxjs/Observable";
{{/usePromise}}
import "whatwg-fetch";
import HttpResponse from "./HttpResponse";
import {injectable} from "inversify";
import { Headers } from "./Headers";

declare var window: any;

@injectable()
class HttpClient implements IHttpClient {

    get(url:string, headers?: Headers):Promise<HttpResponse> {
        return this.performNetworkCall(url, "get", undefined, headers);
    }

    post(url: string, body: any, headers?: Headers): Promise<HttpResponse> {
        return this.performNetworkCall(url, "post", this.getJsonBody(body), this.addJsonHeaders(headers));
    }

    put(url: string, body: any, headers?: Headers): Promise<HttpResponse> {
        return this.performNetworkCall(url, "put", this.getJsonBody(body), this.addJsonHeaders(headers));
    }

    delete(url: string, body: any, headers?: Headers): Promise<HttpResponse> {
        return this.performNetworkCall(url, "delete", undefined, headers);
    }

    private getJsonBody(body: any) {
        return JSON.stringify(body);
    }

    private addJsonHeaders(headers?: Headers) {
        return Object.assign({}, {
            "Accept": "application/json",
            "Content-Type": "application/json"
        }, headers);
    }

    private performNetworkCall(url: string, method: string, body?: any, headers?: Headers): Promise<HttpResponse> {
        let fetch: any;
        if (typeof(window) == 'undefined') {
            fetch = require('node-fetch');
        } else {
            fetch = window.fetch;
        }
        
        let promise = fetch(url, {
            method: method,
            body: body,
            mode: 'cors',
            headers: <any>headers
        }).then(response => {
            let headers: Headers = {};
            response.headers.forEach((value, name) => {
                headers[name.toString().toLowerCase()] = value;
            });
            return response.text().then(text => {
                let contentType = headers["content-type"] || "";
                let payload = contentType.match("application/json") ? JSON.parse(text) : text;
                let httpResponse = new HttpResponse(payload, response.status, headers);

                if (response.status >= 400)
                    throw httpResponse;
                return httpResponse;
            });
        });
        return promise;
    }
}

export default HttpClient
