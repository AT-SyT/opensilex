 
########################
##GLOBAL VARIABLES 
########################
variables:
 ######Â COMMON CONFIGS ####
 # GIT CONFIG
 GIT_DEPTH: 5
 GIT_OPTIONS: "--allow-unrelated-histories"
 ## BUILD CONFIGS ##
 # MAVEN CONFIG
 # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
 # when running from the command line.
 MAVEN_CLI_OPTS: "--batch-mode --show-version "
 MAVEN_CACHE_FOLDER: "$CI_PROJECT_DIR/.m2/repository"
 MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
 # DEFAULT SERVER MAVEN VERSION
 MVN_VERSION: 3.6.3
 # DEFAULT SERVER JAVA VERSION
 JAVA_VERSION: 11
 ## DEPLOY CONFIGS ##
 # REMOTE SERVER CONFIG
 RSYNC_INSTANCES_OPTIONS: "--progress --delete"
 RSYNC_INSTANCES_BIN_PATH: "~/opensilex-instances/bin"
 RSYNC_INSTANCES_DATA_PATH: "~/opensilex-instances/data"
 RSYNC_INSTANCES_LOGS_PATH: "~/opensilex-instances/logs"
 RSYNC_INSTANCES_LOGS_ARCHIVED: "~/opensilex-instances/logs/old"
 
 DEV_TOOLS_REPO_CONF_FILES_PATH: "instances-configuration"
 STOP_SERVER_OPTS: "--adminPort=$OPENSILEX_JAR_ADMIN_PORT --host=$REMOTE_SERVER_IP --CONFIG_FILE=$INSTANCE_CONFIGURATION_FILE_NAME"
 START_SERVER_OPTS: "--adminPort=$OPENSILEX_JAR_ADMIN_PORT --host=$REMOTE_SERVER_IP --port=$OPENSILEX_JAR_PORT --CONFIG_FILE=$INSTANCE_CONFIGURATION_FILE_NAME --DEBUG -d"
 # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
 # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
 YARN_CACHE_FOLDER: "$CI_PROJECT_DIR/cache_yarn"
 NODE_CACHE: "$CI_PROJECT_DIR/opensilex-dev/.node"
 EMBDED_MONGO_CACHE: "/root/.embedmongo/"
 GITLAB_HTTPS: "false"


########################
##  CACHE TEMPLATE
########################

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_BUILD_JOB_NAME"'
.cache_dependencies: &cache_dependencies
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - $YARN_CACHE_FOLDER
      - $MAVEN_CACHE_FOLDER
      - $NODE_CACHE
      - $EMBDED_MONGO_CACHE


########################
##  BUILD TEMPLATE
########################

.build:instance: &build_template_with_opensilex
  <<: *cache_dependencies
  before_script: 
    - |
      if [ ! -z "$COMMIT_SHA_OPENSILEX_DEV" ]; then
        git checkout $COMMIT_SHA_OPENSILEX_DEV
      fi
    - rm -r $CI_PROJECT_DIR/phis-ws
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@forgemia.inra.fr/OpenSILEX/phis-ws.git --branch modularity
    - |
      if [ ! -z "$COMMIT_SHA_PHIS" ]; then
        cd phis-ws
        git checkout $COMMIT_SHA_PHIS
        cd ..
      fi    
  stage: build
  image: maven:$MVN_VERSION-jdk-$JAVA_VERSION
  except:
    - schedules
  artifacts:
    expire_in: "3 week"

########################
##  DEPLOY SSH CONFIGURATION TEMPLATE
########################
.deploy_opensilex_before_script: &deploy_opensilex_before_script
  before_script:
    # test variables before deployement
    -  if [ -z "$REMOTE_SERVER_RSYNC_ACCOUNT" ]; then echo "Missing REMOTE_SERVER_RSYNC_ACCOUNT variable"; exit 1; fi
    -  if [ -z "$REMOTE_SERVER_IP" ]; then echo "Missing REMOTE_SERVER_IP variable"; exit 1; fi
    -  if [ -z "$INTERNAL_CONFIGURATION_FILES_PATH" ]; then echo "Missing INTERNAL_CONFIGURATION_FILES_PATH variable"; exit 1; fi
    -  if [ -z "$INSTANCE_CONFIGURATION_FILE_NAME" ]; then echo "Missing INSTANCE_CONFIGURATION_FILE_NAME variable"; exit 1; fi
    -  if [ -z "$REMOTE_SERVER_SSH_KEY" ]; then echo "Missing REMOTE_SERVER_SSH_KEY variable"; exit 1; fi
    -  if [ -z "$OPENSILEX_JAR_ADMIN_PORT" ]; then echo "Missing OPENSILEX_JAR_ADMIN_PORT variable"; exit 1; fi
    -  if [ -z "$OPENSILEX_JAR_PORT" ]; then echo "Missing OPENSILEX_JAR_PORT variable"; exit 1; fi
    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ${HOME}/.ssh
    - chmod 700 ${HOME}/.ssh
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'which ssh-agent || ( apt-get update && apt-get install openssh-client -y )'
    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)
    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - mkdir -p ${HOME}/.ssh && touch ${HOME}/.ssh/known_hosts
    - ssh-keyscan -H "$REMOTE_SERVER_IP" >> ${HOME}/.ssh/known_hosts
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ${HOME}/.ssh/config
    - echo "$REMOTE_SERVER_SSH_KEY" >> ${HOME}/.ssh/id_rsa
    - chmod 600 ${HOME}/.ssh/id_rsa

########################
##  DEPLOY OPENSILEX TEST TEMPLATE
########################

.deploy:opensilex:instance: &deploy_opensilex_template
  stage: deploy
  when: manual
  image: instrumentisto/rsync-ssh
  script:
    - apk add curl git
    - rm -R $CI_PROJECT_DIR/opensilex-dev-tools
    - echo "Cloning $DEV_BRANCH branch"
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@forgemia.inra.fr/OpenSILEX/opensilex-dev-tools.git --branch $DEV_BRANCH $CI_PROJECT_DIR/opensilex-dev-tools
    - ls $CI_PROJECT_DIR/opensilex-dev-tools
    # Directory details
    - ls $CI_PROJECT_DIR/$REVISION
    - echo "Create directory ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}"
    - echo "Create directory ${RSYNC_INSTANCES_DATA_PATH}/${REMOTE_SERVER_RSYNC_DIR}"
    - echo "Create directory ${RSYNC_INSTANCES_LOGS_PATH}"
    - echo "Create directory ${RSYNC_INSTANCES_LOGS_ARCHIVED}"
    - ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "mkdir -p $RSYNC_INSTANCES_BIN_PATH/$REMOTE_SERVER_RSYNC_DIR; mkdir -p $RSYNC_INSTANCES_LOGS_PATH; mkdir -p $RSYNC_INSTANCES_LOGS_ARCHIVED; mkdir -p $RSYNC_INSTANCES_DATA_PATH/$REMOTE_SERVER_RSYNC_DIR;"
    - echo "Upload files"
    - rsync -arzv -e "ssh  -i ${HOME}/.ssh/id_rsa" $RSYNC_INSTANCES_OPTIONS  $CI_PROJECT_DIR/$REVISION/* $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP:$RSYNC_INSTANCES_BIN_PATH/$REMOTE_SERVER_RSYNC_DIR
    - echo "ls ${INTERNAL_CONFIGURATION_FILES_PATH}"
    - ls $CI_PROJECT_DIR/opensilex-dev-tools/$INTERNAL_CONFIGURATION_FILES_PATH
    - echo "scp -i ${HOME}/.ssh/id_rsa -o 'StrictHostKeyChecking no' $CI_PROJECT_DIR/opensilex-dev-tools/$INTERNAL_CONFIGURATION_FILES_PATH/* ${REMOTE_SERVER_RSYNC_ACCOUNT}@${REMOTE_SERVER_IP}:${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}"
    - scp -i ${HOME}/.ssh/id_rsa -o "StrictHostKeyChecking no" $CI_PROJECT_DIR/opensilex-dev-tools/$INTERNAL_CONFIGURATION_FILES_PATH/* $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP:$RSYNC_INSTANCES_BIN_PATH/$REMOTE_SERVER_RSYNC_DIR
    - echo "Remove dependencies list cache"
    - ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "rm -f ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}/.opensilex.dependencies"
    - echo "Check files"
    - ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "ls ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR};"
    - echo "Restarting server with options ${START_SERVER_OPTS}"
    - ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "cd ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}; java -jar ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}/opensilex.jar server stop $STOP_SERVER_OPTS"
    - ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "cd ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}; java -jar ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}/opensilex.jar server start $START_SERVER_OPTS"
  except:
    - schedules    
  environment:
    name: $CI_JOB_NAME
    url: http://$REMOTE_SERVER_IP:$OPENSILEX_JAR_PORT

# #########
# Arnaud
# #########

arnaud:build:
  <<: *build_template_with_opensilex
  script: 
    - mvn install $MAVEN_CLI_OPTS -Drevision=$REVISION
    - ls  $BUILD_PATH/
    - ls  $BUILD_PATH/opensilex-release-$REVISION
    - mv $BUILD_PATH/opensilex-release-$REVISION $CI_PROJECT_DIR/$REVISION
  artifacts:
    paths:
      - public

# ##########################################
# ##  BUILD & DEPLOY FOR MISTEA TEAM
# ##########################################
 
###################################
##  ALICE-TEST-SNAPSHOT-DEPLOYMENT
###################################

alice:build:
  <<: *build_template_with_opensilex
  only:
    - arnaud
    
###################################
##  ARNAUD-TEST-SNAPSHOT-DEPLOYMENT
###################################

test:arnaud:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  when: on_success  
  variables:
    INTERNAL_CONFIGURATION_FILES_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/arnaud"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4086
    OPENSILEX_JAR_PORT: 8086
    REMOTE_SERVER_RSYNC_ACCOUNT: "phis"
    REMOTE_SERVER_IP: "138.102.159.37"
    REMOTE_SERVER_RSYNC_DIR: "mistea/arnaud"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
    DEV_BRANCH: arnaud
  only:
    - arnaud
  needs:
    - arnaud:build
